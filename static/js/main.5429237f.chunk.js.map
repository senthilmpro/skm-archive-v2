{"version":3,"sources":["services/fetch-service.js","services/archive-service.js","components/post-list/PostList.js","components/home/HomeList.js","App.js","serviceWorker.js","index.js"],"names":["FetchService","baseUrl","axios","get","then","res","data","arr","promiseArr","map","x","title","getArchiveUrlLink","console","log","all","str","replace","ArchiveService","obj","ignoredFormats","is_dark","server","dir","files","newFiles","length","filter","indexOf","format","source","name","identifier","metadata","PostList","props","useState","displayLink","setDisplayLink","showLinks","url","showDL","shortTitle","split","pop","listRender","i","key","href","className","style","width","onClick","window","open","openDownloadUrl","c","join","HomeComponent","loading","setLoading","setData","postsFound","setPostsFound","setshowLinks","setShowDL","getWpData","a","fetchWordpress","wpData","posts","URL","protocol","fetchArchiveUrl","archiveResponse","archiveData","postsArr","forEach","getFileUrl","isDark","getDownloadUrl","push","filesRender","useEffect","type","onChange","checked","paddingTop","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5429237f.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class FetchService {\n    \n    static async fetchWordpress(){\n        let site = 'dumppro.wordpress.com';\n        let number = 10;\n        let baseUrl = `https://public-api.wordpress.com/rest/v1.1/sites/${site}/posts?number=${number}&fields=title`;\n        const data = await axios.get(baseUrl).then(res => res.data);\n        return data;\n    }\n\n    static async fetchArchiveUrl(arr){\n        let promiseArr = arr.map(x => {\n            let title = this.getArchiveUrlLink(x.title);\n            console.log(\"TITLE: \", title);\n            return axios.get(title);\n        });\n        return axios.all(promiseArr);\n    }\n\n    static getArchiveUrlLink(str){\n        return str.replace('/details/','/metadata/').replace('/download/','/metadata/');\n    }\n\n\n}","export default class ArchiveService {\n\n    static getFilesDirectories(arr){\n\n    }\n\n    static getFileUrl(obj){\n        if(!obj){\n            return []\n        }\n        let ignoredFormats = [\n            \"Metadata\",\n            \"Archive BitTorrent\",\n            \"BitTorrent\",\n            \"Thumbnail\",\n            \"BitTorrentContents\",\n            \"Text\"\n        ];\n        let isDark = obj.is_dark;\n        if(isDark){\n            return [];\n        }\n        let server = obj.server;\n        let dir = obj.dir;\n        let files = obj.files;\n        let newFiles = [];\n        if(files && files.length > 0){\n            newFiles = files.filter(x => ignoredFormats.indexOf(x.format) === -1).filter(x => x.source === 'original');\n            newFiles = newFiles.map(x => {\n                let fileUrl = `https://${server}${dir}/${x.name}`;\n                return fileUrl;\n            });\n        }\n        \n        \n        return newFiles;\n    }\n\n    static getDownloadUrl(obj){\n        let identifier = obj.metadata && obj.metadata.identifier;\n        return `https://archive.org/download/${identifier}`;\n    }\n\n}","import React, { useState } from 'react';\nimport './Post.css';\n\nexport default function PostList(props) {\n    const [displayLink, setDisplayLink] = useState(false);\n    const hideLinks = () => setDisplayLink(c => !c);\n\n    const openDownloadUrl = (url) => {\n        window.open(url, \"_blank\");\n    }\n\n    const { files, title, showLinks, url, showDL } = props;\n\n    let shortTitle = title.split('/').pop();\n    let fileName = (str) => str.split('/').pop();\n\n    let listRender = showLinks ? files.map((x, i) => <li key={i}><a href={x}>{x}</a></li>) :\n        files.map((x, i) => <li key={i}><a href={x}>{fileName(x)}</a></li>);\n\n    return (\n        <div className=\"post_container\">\n            <div style={{ width: '100%' }} className=\"entry_container\">\n                <h3>{shortTitle}</h3>\n                <button className=\"btn btn-info dl-button\" onClick={() => openDownloadUrl(url)} style={{\"display\" : showDL ? \"block\" : \"none\" }}>DL</button>\n                <button onClick={hideLinks} style={{ \"marginLeft\": \"10px\", \"display\": files.length > 0 ? \"block\" : \"none\" }} className={[\"btn\", \"btn-primary\", \"link-button\"].join(\" \")}>Show Links</button>\n            </div>\n            <span className=\"files-count\"><span>File count </span> : <b>{files.length}</b></span>\n            <div style={{ \"display\": displayLink ? \"block\" : \"none\" }}>\n                <ul className=\"links_list\">\n                    {listRender}\n                </ul>\n            </div>\n        </div>\n        \n        \n    )\n}","import React, { useState, useEffect } from 'react';\nimport FetchService from '../../services/fetch-service';\nimport ArchiveService from '../../services/archive-service';\nimport PostList from '../post-list/PostList';\nimport './Home.css';\n\nexport default function HomeComponent() {\n    const [loading, setLoading] = useState(true);\n    const [data, setData] = useState([]);\n    const [postsFound, setPostsFound] = useState(false);\n    const [showLinks, setshowLinks] = useState(true);\n    const [showDL, setShowDL] = useState(false);\n\n    const getWpData = async () => {\n        setLoading(true);\n        let wpData = await FetchService.fetchWordpress();\n        let posts = wpData.posts;\n        posts = posts.map(x => {\n            let title = x.title.replace('/details/','/download/').replace('http://','https://');\n            x.title = title;\n            return x;\n        });\n        posts = posts.filter(x => (new URL(x.title).protocol !== \"http:\"));\n        let archiveResponse = await FetchService.fetchArchiveUrl(posts);\n        console.log(\"archiveResponse \", archiveResponse);\n        let archiveData = archiveResponse.map(x => {\n            return x.data\n        });\n\n        console.log(\"Archive Data : \", archiveData)\n\n        let postsArr = [];\n        archiveData.forEach((x, i) => {\n            let obj = {\n                title: posts[i].title,\n                files: ArchiveService.getFileUrl(x),\n                isDark: !!x.is_dark,\n                url: ArchiveService.getDownloadUrl(x)\n            };\n            if (!obj.isDark) {\n                postsArr.push(obj);\n            }\n            console.log(obj);\n        });\n\n        if (postsArr.length > 0) {\n            setPostsFound(true);\n            setData(postsArr);\n        }\n        setLoading(false);\n\n        return postsArr;\n    }\n\n    const showFullLinks = () => setshowLinks(c => !c);\n\n    const showDLButton = () => setShowDL(c => !c);\n\n    const posts = data;\n    const filesRender = posts.map(x => <li><PostList files={x.files} title={x.title} showLinks={showLinks} url={x.url} showDL={showDL} /></li>);\n\n    useEffect(() => {\n        getWpData();\n    },[]);\n\n    return (\n        <>\n            {\n                loading && <div>Loading...</div>\n            }\n            {\n                !loading &&\n                <>\n                    {!postsFound && <div className=\"container\">No posts found</div>}\n                    {postsFound &&\n                        <div>\n                            <h2>Archive Link Checker v2</h2>\n                            <label>Show Links : </label> <input type=\"checkbox\" onChange={showFullLinks} checked={showLinks} />\n                            <label>Show DL : </label> <input type=\"checkbox\" onChange={showDLButton} checked={showDL} />\n                            <div style={{ width: '95%', paddingTop: \"45px\" }}>\n                                <ul className=\"list_box\">\n                                    {filesRender}\n                                </ul>\n                            </div>\n                        </div>\n                    }\n                </>\n            }\n        </>\n    )\n\n}","import React from 'react';\nimport './App.css';\nimport HomeComponent from './components/home/HomeList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <HomeComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}