{"version":3,"sources":["logo.svg","services/fetch-service.js","services/archive-service.js","components/post-list/index.js","components/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FetchService","baseUrl","axios","get","then","res","data","arr","promiseArr","map","x","title","getArchiveUrlLink","all","str","replace","ArchiveService","obj","ignoredFormats","is_dark","server","dir","files","newFiles","length","filter","indexOf","format","source","name","PostList","hideLinks","bind","state","displayLink","this","setState","listRender","props","split","pop","showLinks","fileCount","i","key","href","style","width","className","onClick","join","React","Component","HomeComponent","postsFound","loading","getWpData","showFullLinks","fetchWordpress","wpData","fetchArchiveUrl","posts","archiveResponse","console","log","archiveData","postsArr","forEach","getFileUrl","isDark","push","filesRender","type","onChange","checked","paddingTop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,iPCEtBC,E,sOAGF,wBACE,GACTC,E,2DAFO,wB,yBACE,G,0BAEMC,IAAMC,IAAIF,GAASG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,Q,cAAhDA,E,yBACCA,G,gLAGkBC,G,qFACrBC,EAAaD,EAAIE,KAAI,SAAAC,GACrB,IAAIC,EAAQ,EAAKC,kBAAkBF,EAAEC,OACrC,OAAOT,IAAMC,IAAIQ,M,kBAEdT,IAAMW,IAAIL,I,0IAGIM,GACrB,OAAOA,EAAIC,QAAQ,YAAY,cAAcA,QAAQ,aAAa,kB,KCrBrDC,E,iHAEUT,M,iCAITU,GACd,IAAIA,EACA,MAAO,GAEX,IAAIC,EAAiB,CACjB,WACA,qBACA,aACA,YACA,qBACA,QAGJ,GADaD,EAAIE,QAEb,MAAO,GAEX,IAAIC,EAASH,EAAIG,OACbC,EAAMJ,EAAII,IACVC,EAAQL,EAAIK,MACZC,EAAW,GAUf,OATGD,GAASA,EAAME,OAAS,IAEvBD,GADAA,EAAWD,EAAMG,QAAO,SAAAf,GAAC,OAA0C,IAAtCQ,EAAeQ,QAAQhB,EAAEiB,WAAgBF,QAAO,SAAAf,GAAC,MAAiB,aAAbA,EAAEkB,WAChEnB,KAAI,SAAAC,GAEpB,MADW,kBAAcU,GAAd,OAAuBC,EAAvB,YAA8BX,EAAEmB,UAM5CN,M,KChCMO,G,kBAEjB,aAAe,IAAD,8BACV,+CACKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,MAAQ,CACTC,YAAc,QAJR,E,yEASqB,SAA3BC,KAAKF,MAAMC,YACXC,KAAKC,SAAS,CACVF,YAAa,UAGjBC,KAAKC,SAAS,CACVF,YAAa,W,+BAOrB,IASIG,EATEf,EAAQa,KAAKG,MAAMhB,MACnBX,EAAQwB,KAAKG,MAAM3B,MAAM4B,MAAM,KAAKC,MACpCC,EAAYN,KAAKG,MAAMG,UAIvBC,EAAYpB,EAAME,OAClBU,EAAcC,KAAKF,MAAMC,YAW/B,OAPIG,EADAI,EACanB,EAAMb,KAAI,SAACC,EAAGiC,GAAJ,OAAU,wBAAIC,IAAKD,GAAG,uBAAGE,KAAMnC,GAAIA,OAE7CY,EAAMb,KAAI,SAACC,EAAGiC,GAAJ,OAAU,wBAAIC,IAAKD,GAAG,uBAAGE,KAAMnC,GAAaA,EATxD6B,MAAM,KAAKC,WAetB,yBAAKM,MAAO,CAAEC,MAAO,QAAUC,UAAU,mBACrC,4BAAKrC,GACL,6CAFJ,MAE+B,2BAAI+B,GAC/B,4BAAQO,QAASd,KAAKJ,UAAWe,MAAgC,CAAC,QAAYJ,EAAY,EAAI,QAAU,QAASM,UAAW,CAAC,MAAO,eAAeE,KAAK,MAAxJ,cACA,yBAAKJ,MAAO,CAAE,QAAWZ,IACrB,wBAAIc,UAAU,cACTX,S,GAjDac,IAAMC,YCIvBC,G,kBACjB,aAAe,IAAD,8BACV,+CACKpB,MAAQ,CACT3B,KAAM,GACNgD,YAAY,EACZC,SAAU,EACVd,WAAY,GAEhB,EAAKe,UAAY,EAAKA,UAAUxB,KAAf,gBACjB,EAAKyB,cAAgB,EAAKA,cAAczB,KAAnB,gBACrB,EAAKwB,YAVK,E,sMAcVrB,KAAKC,SAAS,CACVmB,SAAU,I,SAEKvD,EAAa0D,iB,cAA5BC,E,gBACwB3D,EAAa4D,gBAAgBD,EAAOE,O,cAA5DC,E,OACJC,QAAQC,IAAI,mBAAoBF,GAC5BG,EAAcH,EAAgBrD,KAAI,SAAAC,GAClC,OAAOA,EAAEJ,QAGT4D,EAAW,GACfD,EAAYE,SAAQ,SAACzD,EAAGiC,GACpB,IAAI1B,EAAM,CACNN,MAAOgD,EAAOE,MAAMlB,GAAGhC,MACvBW,MAAON,EAAeoD,WAAW1D,GACjC2D,SAAS3D,EAAES,SAAUT,EAAES,SAEtBF,EAAIoD,QACLH,EAASI,KAAKrD,GAElB8C,QAAQC,IAAI/C,MAGZiD,EAAS1C,OAAS,GAClBW,KAAKC,SAAS,CACVkB,YAAY,EACZhD,KAAO4D,IAGfH,QAAQC,IAAIE,GAEZ/B,KAAKC,SAAS,CACVmB,SAAU,I,kBAGPW,G,6IAIP,IAAIzB,EAAYN,KAAKF,MAAMQ,UAC3BN,KAAKC,SAAS,CACVK,WAAaA,M,+BAMX,IAAD,OAEL,GAAIN,KAAKF,MAAMsB,QACX,OACI,yBAAKP,UAAU,aAAf,WAKJ,IACMuB,EADQpC,KAAKF,MAAM3B,KACCG,KAAI,SAAAC,GAAC,OAAI,4BAAI,kBAAC,EAAD,CAAUY,MAAOZ,EAAEY,MAAOX,MAAOD,EAAEC,MAAO8B,UAAW,EAAKR,MAAMQ,gBAEvG,OAAIN,KAAKF,MAAMqB,WAQP,6BACI,uDACA,gDAFJ,IAEiC,2BAAOkB,KAAK,WAAWC,SAAUtC,KAAKsB,cAAeiB,QAASvC,KAAKF,MAAMQ,YACtG,yBAAKK,MAAO,CAACC,MAAO,MAAO4B,WAAY,SACnC,wBAAI3B,UAAU,YACTuB,KAXb,yBAAKvB,UAAU,aAAf,sB,GA5EuBG,IAAMC,YCQlCwB,MATf,WACE,OACE,yBAAK5B,UAAU,OAEb,kBAAC,EAAD,QCEc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,MAAK,SAAAqF,GACjCA,EAAaC,kB","file":"static/js/main.f4b84e5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import axios from 'axios';\n\nexport default class FetchService {\n    \n    static async fetchWordpress(){\n        let site = 'dumppro.wordpress.com';\n        let number = 10;\n        let baseUrl = `https://public-api.wordpress.com/rest/v1.1/sites/${site}/posts?number=${number}&fields=title`;\n        const data = await axios.get(baseUrl).then(res => res.data);\n        return data;\n    }\n\n    static async fetchArchiveUrl(arr){\n        let promiseArr = arr.map(x => {\n            let title = this.getArchiveUrlLink(x.title);\n            return axios.get(title);\n        });\n        return axios.all(promiseArr);\n    }\n\n    static getArchiveUrlLink(str){\n        return str.replace('/details/','/metadata/').replace('/download/','/metadata/');\n    }\n\n\n}","export default class ArchiveService {\n\n    static getFilesDirectories(arr){\n\n    }\n\n    static getFileUrl(obj){\n        if(!obj){\n            return []\n        }\n        let ignoredFormats = [\n            \"Metadata\",\n            \"Archive BitTorrent\",\n            \"BitTorrent\",\n            \"Thumbnail\",\n            \"BitTorrentContents\",\n            \"Text\"\n        ];\n        let isDark = obj.is_dark;\n        if(isDark){\n            return [];\n        }\n        let server = obj.server;\n        let dir = obj.dir;\n        let files = obj.files;\n        let newFiles = [];\n        if(files && files.length > 0){\n            newFiles = files.filter(x => ignoredFormats.indexOf(x.format) === -1).filter(x => x.source === 'original');\n            newFiles = newFiles.map(x => {\n                let fileUrl = `https://${server}${dir}/${x.name}`;\n                return fileUrl;\n            });\n        }\n        \n        \n        return newFiles;\n    }\n}","import React from 'react';\nimport './Post.css';\n\nexport default class PostList extends React.Component {\n\n    constructor() {\n        super();\n        this.hideLinks = this.hideLinks.bind(this);\n        this.state = {\n            displayLink : \"none\"\n        };\n    }\n\n    hideLinks() {\n        if (this.state.displayLink === \"none\") {\n            this.setState({\n                displayLink: \"block\"\n            });\n        } else {\n            this.setState({\n                displayLink: \"none\"\n            });\n        }\n\n    }\n\n    render() {\n        const files = this.props.files;\n        const title = this.props.title.split('/').pop();\n        const showLinks = this.props.showLinks;\n        const fileName = (str) => {\n            return str.split(\"/\").pop()\n        };\n        const fileCount = files.length;\n        const displayLink = this.state.displayLink;\n\n        let listRender;\n        if (showLinks) {\n            listRender = files.map((x, i) => <li key={i}><a href={x}>{x}</a></li>);\n        } else {\n            listRender = files.map((x, i) => <li key={i}><a href={x}>{fileName(x)}</a></li>);\n        }\n        \n        let goToProfile\n\n        return (\n            <div style={{ width: '100%' }} className=\"entry_container\">\n                <h3>{title}</h3>\n                <span>File count </span> : <b>{fileCount}</b>\n                <button onClick={this.hideLinks} style={{\"marginLeft\" : \"10px\"}, {\"display\" : fileCount > 0 ? \"block\" : \"none\"}} className={[\"btn\", \"btn-primary\"].join(\" \")}>Show Links</button>\n                <div style={{ \"display\": displayLink  }}>\n                    <ul className=\"links_list\">\n                        {listRender}\n                    </ul>\n                </div>\n            </div>\n        )\n\n\n\n    }\n}","import React from 'react';\nimport FetchService from '../../services/fetch-service';\nimport ArchiveService from '../../services/archive-service';\nimport PostList from '../post-list';\nimport './Home.css';\n\n\nexport default class HomeComponent extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            postsFound: false,\n            loading : true,\n            showLinks : true\n        };\n        this.getWpData = this.getWpData.bind(this);\n        this.showFullLinks = this.showFullLinks.bind(this);\n        this.getWpData();\n    }\n\n    async getWpData() {\n        this.setState({\n            loading : true\n        });\n        let wpData = await FetchService.fetchWordpress();\n        let archiveResponse = await FetchService.fetchArchiveUrl(wpData.posts);\n        console.log(\"archiveResponse \", archiveResponse);\n        let archiveData = archiveResponse.map(x => {\n            return x.data\n        });\n\n        let postsArr = [];\n        archiveData.forEach((x, i) => {\n            let obj = {\n                title: wpData.posts[i].title,\n                files: ArchiveService.getFileUrl(x),\n                isDark : x.is_dark ? x.is_dark : false\n            };\n            if (!obj.isDark) {\n                postsArr.push(obj);\n            }\n            console.log(obj);\n        });\n\n        if (postsArr.length > 0) {\n            this.setState({\n                postsFound: true,\n                data : postsArr\n            });\n        }\n        console.log(postsArr);\n\n        this.setState({\n            loading : false\n        });\n\n        return postsArr;\n    }\n\n    showFullLinks(){\n        let showLinks = this.state.showLinks;\n        this.setState({\n            showLinks : !showLinks\n        })\n        \n    }\n\n    // home page rendered\n    render() {\n\n        if (this.state.loading) {\n            return (\n                <div className=\"container\">\n                    Loading\n                </div>\n                )\n        } else {\n            const posts = this.state.data;\n            const filesRender = posts.map(x => <li><PostList files={x.files} title={x.title} showLinks={this.state.showLinks} /></li>);\n\n            if(!this.state.postsFound){\n                return (\n                    <div className=\"container\">\n                        No posts found\n                    </div>\n                )\n            } else {\n                return (\n                    <div>\n                        <h2>Archive Link Checker v2</h2>\n                        <label>Show Links : </label> <input type=\"checkbox\" onChange={this.showFullLinks} checked={this.state.showLinks}/>\n                        <div style={{width: '95%', paddingTop: \"45px\"}}>\n                            <ul className=\"list_box\">\n                                {filesRender}\n                            </ul>\n                        </div>\n                    </div>\n                )\n            }\n        }   \n\n    }\n}   ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomeComponent from './components/home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <HomeComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}